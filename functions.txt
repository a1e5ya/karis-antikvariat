1. Authentication Module (auth.js)

isAuthenticated(): Check if user is authenticated via session storage
showLoginModal(): Display login dialog with form reset
showWelcomeMessage(): Display welcome message after successful login
login(username, password): Authenticate user credentials and store session
logout(): End user session, clear storage, and redirect to homepage
handleForgotPassword(): Process password reset requests via email

2. Core Utilities (core.js)

validateItemForm(formData): Validate all input fields for item forms
sanitizeInput(input): Clean user input to prevent XSS attacks
performAdvancedSearch(items, searchParams): Search across multiple fields with filters
filterItemsByCategory(items, category): Filter items by specific category
filterItemsByPrice(items, minPrice, maxPrice): Filter items by price range
sortItems(items, sortBy, ascending): Sort items based on various criteria
exportToCSV(items, fields): Export inventory data to CSV format
generateInventoryReport(items): Create comprehensive inventory statistics
formatCurrency(amount, currencySymbol): Format prices consistently with currency symbol
parseDate(dateString, format): Format dates consistently in different formats
generateUniqueId(existingItems): Create new unique IDs for items
fetchItems(params): Retrieve items with filtering, sorting, and pagination
debounce(func, wait): Limit function call frequency for performance

3. Admin Interface (admin.js)

init(): Initialize admin interface and load required components
initializeTabs(): Set up Bootstrap tab navigation
setupEventHandlers(): Configure all event listeners for admin interface
loadInventoryItems(items): Display items in inventory table with actions
loadListsItems(items): Display items in lists table with selection options
searchItems(): Filter inventory based on search criteria and category
clearAddItemForm(): Reset the add item form
addNewItem(): Validate and add new item to inventory
editItem(id): Navigate to item edit page
sellItem(id): Mark item as sold and update inventory
deleteItem(id): Remove item from inventory with confirmation
viewItem(id): Navigate to item details page
handlePrintList(): Prepare selected items for printing
loadDatabaseReferences(): Load categories, shelves, genres, and conditions
loadCategories(): Populate category management table
loadShelves(): Populate shelf management table
loadGenres(): Populate genre management table
loadConditions(): Populate condition management table
addDatabaseItem(type): Add new reference item (category, shelf, etc.)
editDatabaseItem(type, id): Edit existing reference item
deleteDatabaseItem(type, id): Delete reference item with usage check
updateCategoryDropdowns(): Update category dropdown menus
updateShelfDropdowns(): Update shelf location dropdown menus
updateGenreDropdowns(): Update genre dropdown menus
updateConditionDropdowns(): Update condition dropdown menus

4. Public Interface (public.js)

init(): Initialize public interface components
getText(key): Get translated string based on current language
switchLanguage(lang): Change interface language and update UI
updateInterfaceLanguage(): Update all UI text based on selected language
loadItemDetails(itemId): Show detailed information for a specific item
loadRelatedItems(currentItem): Display related items based on category/author
initNewsletterForm(): Handle newsletter subscription form submissions
initLanguageSwitcher(): Set up language switching functionality
getCategoryImage(category): Get appropriate image based on item category
formatPrice(price): Format price with Euro symbol
formatDate(dateString): Format date according to locale
getUrlParameter(name): Extract parameters from URL
initSmoothScrolling(): Enable smooth scrolling for anchor links

5. Item Management (item.html, item-admin.html)

loadItemDetailsAdmin(itemId): Load item details for admin editing
updateImagePreview(): Update item image based on selected category
saveItemChanges(): Save edits to item details
confirmDeleteItem(): Confirm and process item deletion

6. Homepage Functions (index.html)

loadFeaturedItems(): Display featured items on homepage
loadPublicInventory(): Display available items in public inventory table
searchPublicInventory(): Filter public inventory based on search criteria
loadHeaderAndFooter(): Dynamically load page header and footer components

7. Inventory Page Functions (inventory.html)

initInventorySystem(): Initialize inventory management system
setupEventHandlers(): Set up event handlers for inventory page
